<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd"
                 version="2.2">

    <entity class="com.datn.beestyle.entity.product.ProductVariant">
        <!-- Product single -->
        <sql-result-set-mapping name="ProductVariantResponseMapping">
            <constructor-result target-class="com.datn.beestyle.dto.product.variant.ProductVariantResponse">
                <column name="id" class="java.lang.Long"/>
                <column name="productId" class="java.lang.Long"/>
                <column name="productCode" class="java.lang.String"/>
                <column name="productName" class="java.lang.String"/>
                <column name="salePrice" class="java.math.BigDecimal"/>
                <column name="discountPrice" class="java.math.BigDecimal"/>
                <column name="discountValue" class="java.lang.Integer"/>
                <column name="sku" class="java.lang.String"/>
                <column name="categoryName" class="java.lang.String"/>
                <column name="brandName" class="java.lang.String"/>
                <column name="quantityInStock" class="java.lang.Integer"/>
                <column name="colorCode" class="java.lang.String"/>
                <column name="colorName" class="java.lang.String"/>
                <column name="sizeName" class="java.lang.String"/>
                <column name="description" class="java.lang.String"/>
            </constructor-result>
        </sql-result-set-mapping>

        <named-native-query name="ProductVariant.getProductVariantData"
                            result-set-mapping="ProductVariantResponseMapping">
            <query>
                select
                pv.id as id, p.id as productId, p.product_code as productCode,
                p.product_name as productName, pv.sale_price as salePrice,
                pv.sale_price - (pv.sale_price * COALESCE(pm.discount_value, 0) / 100) as discountPrice,
                pm.discount_value as discountValue,
                pv.sku as sku, c.category_name as categoryName,
                b.brand_name as brandName, pv.quantity_in_stock as quantityInStock,
                cl.color_code as colorCode, cl.color_name as colorName,
                s.size_name as sizeName, p.description as description
                from product_variant pv
                inner join product p on p.id = pv.product_id
                inner join category c on c.id = p.category_id
                inner join brand b on p.brand_id = b.id
                inner join color cl on cl.id = pv.color_id
                inner join size s on s.id = pv.size_id
                left join promotion pm on pv.promotion_id = pm.id
                where pv.product_id = :product_id
                and p.status = 1 and pv.status = 1
                and (:color_code is null or cl.color_code like :color_code)
                and (:size_id is null or s.id = :size_id)
            </query>
        </named-native-query>

        <!-- Cart checked -->
        <sql-result-set-mapping name="ProductVariantCheckCartMapping">
            <constructor-result target-class="com.datn.beestyle.dto.product.variant.ProductVariantResponse">
                <column name="id" class="java.lang.Long"/>
                <column name="productId" class="java.lang.Long"/>
                <column name="productName" class="java.lang.String"/>
                <column name="salePrice" class="java.math.BigDecimal"/>
                <column name="discountPrice" class="java.math.BigDecimal"/>
                <column name="discountValue" class="java.lang.Integer"/>
                <column name="sku" class="java.lang.String"/>
                <column name="quantityInStock" class="java.lang.Integer"/>
                <column name="colorName" class="java.lang.String"/>
                <column name="sizeName" class="java.lang.String"/>
                <column name="imageUrl" class="java.lang.String"/>
            </constructor-result>
        </sql-result-set-mapping>

        <named-native-query name="ProductVariant.getProductVariantDataByIds"
                            result-set-mapping="ProductVariantCheckCartMapping">
            <query>
                select
                pv.id as id, p.id as productId,
                p.product_name as productName, pv.sale_price as salePrice,
                pv.sale_price - (pv.sale_price * COALESCE(pm.discount_value, 0) / 100) as discountPrice,
                pm.discount_value as discountValue, pv.sku as sku,
                pv.quantity_in_stock as quantityInStock, cl.color_name as colorName,
                s.size_name as sizeName, pim.image_url as imageUrl
                from product_variant pv
                inner join product p on p.id = pv.product_id
                inner join category c on c.id = p.category_id
                inner join brand b on p.brand_id = b.id
                inner join color cl on cl.id = pv.color_id
                inner join size s on s.id = pv.size_id
                left join promotion pm on pv.promotion_id = pm.id
                left join product_image pim on p.id = pim.product_id and pim.is_default = 1
                where pv.id in (:productVariantIds)
                and p.status = 1 and pv.status = 1
            </query>
        </named-native-query>
    </entity>

</entity-mappings>